// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcEchoClient is the client API for GrpcEcho service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcEchoClient interface {
	EchoMsg(ctx context.Context, in *GrpcMsg, opts ...grpc.CallOption) (*GrpcMsg, error)
}

type grpcEchoClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcEchoClient(cc grpc.ClientConnInterface) GrpcEchoClient {
	return &grpcEchoClient{cc}
}

func (c *grpcEchoClient) EchoMsg(ctx context.Context, in *GrpcMsg, opts ...grpc.CallOption) (*GrpcMsg, error) {
	out := new(GrpcMsg)
	err := c.cc.Invoke(ctx, "/grpc.GrpcEcho/echoMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcEchoServer is the server API for GrpcEcho service.
// All implementations must embed UnimplementedGrpcEchoServer
// for forward compatibility
type GrpcEchoServer interface {
	EchoMsg(context.Context, *GrpcMsg) (*GrpcMsg, error)
	mustEmbedUnimplementedGrpcEchoServer()
}

// UnimplementedGrpcEchoServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcEchoServer struct {
}

func (UnimplementedGrpcEchoServer) EchoMsg(context.Context, *GrpcMsg) (*GrpcMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoMsg not implemented")
}
func (UnimplementedGrpcEchoServer) mustEmbedUnimplementedGrpcEchoServer() {}

// UnsafeGrpcEchoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcEchoServer will
// result in compilation errors.
type UnsafeGrpcEchoServer interface {
	mustEmbedUnimplementedGrpcEchoServer()
}

func RegisterGrpcEchoServer(s grpc.ServiceRegistrar, srv GrpcEchoServer) {
	s.RegisterService(&GrpcEcho_ServiceDesc, srv)
}

func _GrpcEcho_EchoMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcEchoServer).EchoMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.GrpcEcho/echoMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcEchoServer).EchoMsg(ctx, req.(*GrpcMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcEcho_ServiceDesc is the grpc.ServiceDesc for GrpcEcho service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcEcho_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GrpcEcho",
	HandlerType: (*GrpcEchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "echoMsg",
			Handler:    _GrpcEcho_EchoMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_gen/echo.proto",
}
