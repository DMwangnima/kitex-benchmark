// Code generated by Kitex v0.0.1. DO NOT EDIT.

package echo

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex-benchmark/protobuf/kitex/kitex_gen/echo"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return echoServiceInfo
}

var echoServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "Echo"
	handlerType := (*echo.Echo)(nil)
	methods := map[string]kitex.MethodInfo{
		"echoStr": kitex.NewMethodInfo(echoStrHandler, newEchoStrArgs, newEchoStrResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "echo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.0.1",
		Extra:           extra,
	}
	return svcInfo
}

func echoStrHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*EchoStrArgs)
	realResult := result.(*EchoStrResult)
	success, err := handler.(echo.Echo).EchoStr(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoStrArgs() interface{} {
	return &EchoStrArgs{}
}

func newEchoStrResult() interface{} {
	return &EchoStrResult{}
}

type EchoStrArgs struct {
	Req *echo.StrMsg
}

func (p *EchoStrArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in EchoStrArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *EchoStrArgs) Unmarshal(in []byte) error {
	msg := new(echo.StrMsg)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EchoStrArgs_Req_DEFAULT *echo.StrMsg

func (p *EchoStrArgs) GetReq() *echo.StrMsg {
	if !p.IsSetReq() {
		return EchoStrArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EchoStrArgs) IsSetReq() bool {
	return p.Req != nil
}

type EchoStrResult struct {
	Success *echo.StrMsg
}

var EchoStrResult_Success_DEFAULT *echo.StrMsg

func (p *EchoStrResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in EchoStrResult")
	}
	return proto.Marshal(p.Success)
}

func (p *EchoStrResult) Unmarshal(in []byte) error {
	msg := new(echo.StrMsg)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EchoStrResult) GetSuccess() *echo.StrMsg {
	if !p.IsSetSuccess() {
		return EchoStrResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EchoStrResult) SetSuccess(x interface{}) {
	p.Success = x.(*echo.StrMsg)
}

func (p *EchoStrResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) EchoStr(ctx context.Context, Req *echo.StrMsg) (r *echo.StrMsg, err error) {
	var _args EchoStrArgs
	_args.Req = Req
	var _result EchoStrResult
	if err = p.c.Call(ctx, "echoStr", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
