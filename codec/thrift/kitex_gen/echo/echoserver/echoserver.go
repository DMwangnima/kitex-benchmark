// Code generated by Kitex v0.9.1. DO NOT EDIT.

package echoserver

import (
	"context"
	"errors"
	echo "github.com/cloudwego/kitex-benchmark/codec/thrift/kitex_gen/echo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Echo": kitex.NewMethodInfo(
		echoHandler,
		newEchoServerEchoArgs,
		newEchoServerEchoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoLarge": kitex.NewMethodInfo(
		echoLargeHandler,
		newEchoServerEchoLargeArgs,
		newEchoServerEchoLargeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"TestObj": kitex.NewMethodInfo(
		testObjHandler,
		newEchoServerTestObjArgs,
		newEchoServerTestObjResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	echoServerServiceInfo                = NewServiceInfo()
	echoServerServiceInfoForClient       = NewServiceInfoForClient()
	echoServerServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return echoServerServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return echoServerServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return echoServerServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "EchoServer"
	handlerType := (*echo.EchoServer)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "echo",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.EchoServerEchoArgs)
	realResult := result.(*echo.EchoServerEchoResult)
	success, err := handler.(echo.EchoServer).Echo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoServerEchoArgs() interface{} {
	return echo.NewEchoServerEchoArgs()
}

func newEchoServerEchoResult() interface{} {
	return echo.NewEchoServerEchoResult()
}

func echoLargeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.EchoServerEchoLargeArgs)
	realResult := result.(*echo.EchoServerEchoLargeResult)
	success, err := handler.(echo.EchoServer).EchoLarge(ctx, realArg.Msg)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoServerEchoLargeArgs() interface{} {
	return echo.NewEchoServerEchoLargeArgs()
}

func newEchoServerEchoLargeResult() interface{} {
	return echo.NewEchoServerEchoLargeResult()
}

func testObjHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.EchoServerTestObjArgs)
	realResult := result.(*echo.EchoServerTestObjResult)
	success, err := handler.(echo.EchoServer).TestObj(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoServerTestObjArgs() interface{} {
	return echo.NewEchoServerTestObjArgs()
}

func newEchoServerTestObjResult() interface{} {
	return echo.NewEchoServerTestObjResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context, req *echo.Request) (r *echo.Response, err error) {
	var _args echo.EchoServerEchoArgs
	_args.Req = req
	var _result echo.EchoServerEchoResult
	if err = p.c.Call(ctx, "Echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoLarge(ctx context.Context, msg *echo.LargeMessage) (r *echo.LargeMessage, err error) {
	var _args echo.EchoServerEchoLargeArgs
	_args.Msg = msg
	var _result echo.EchoServerEchoLargeResult
	if err = p.c.Call(ctx, "EchoLarge", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestObj(ctx context.Context, req *echo.ObjReq) (r *echo.ObjResp, err error) {
	var _args echo.EchoServerTestObjArgs
	_args.Req = req
	var _result echo.EchoServerTestObjResult
	if err = p.c.Call(ctx, "TestObj", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
